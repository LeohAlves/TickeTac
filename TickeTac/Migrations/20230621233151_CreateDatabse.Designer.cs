// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TickeTac.Data;

#nullable disable

namespace TickeTac.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230621233151_CreateDatabse")]
    partial class CreateDatabse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f1981bc9-5450-459e-b382-24673674947e",
                            ConcurrencyStamp = "9fe1591a-a0d2-4f16-a743-55fef086fb30",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "58e9d7c8-22c7-494d-a637-5b9ab581b00f",
                            ConcurrencyStamp = "23505415-60c7-45f1-a9b3-b8a41f421836",
                            Name = "Usuário",
                            NormalizedName = "USUÁRIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d37896be-af54-404c-9578-30c252dcd6ac",
                            RoleId = "f1981bc9-5450-459e-b382-24673674947e"
                        },
                        new
                        {
                            UserId = "0aff4b3f-6c07-4325-adf8-5846e4fa4256",
                            RoleId = "58e9d7c8-22c7-494d-a637-5b9ab581b00f"
                        },
                        new
                        {
                            UserId = "5c14cfbf-9769-4669-b1af-219b0df33acb",
                            RoleId = "58e9d7c8-22c7-494d-a637-5b9ab581b00f"
                        },
                        new
                        {
                            UserId = "90d1106d-f7f9-4eb4-8e79-d17931d80fb7",
                            RoleId = "58e9d7c8-22c7-494d-a637-5b9ab581b00f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TickeTac.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d37896be-af54-404c-9578-30c252dcd6ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eea5645a-29e6-45f2-902a-ad1e2a509004",
                            Email = "Admin@TickeTac.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@TICKETAC.COM",
                            NormalizedUserName = "ADMIN@TICKETAC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEuCj7sP49egQRE5lSzZ9Tx76TR0hC9CDRgLxgHN6avK3dbHSAUKtzngS9HiJ+OJpQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://www.pngmart.com/files/21/Admin-Profile-Vector-PNG-Clipart.png",
                            SecurityStamp = "2492560",
                            TwoFactorEnabled = false,
                            UserName = "Admin@TickeTac.com"
                        },
                        new
                        {
                            Id = "0aff4b3f-6c07-4325-adf8-5846e4fa4256",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4415f185-09ab-4f03-9e07-e862da079428",
                            Email = "Gallo@Email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "José Gallo",
                            NormalizedEmail = "GALLO@EMAIL.COM",
                            NormalizedUserName = "GALLO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNy28BqrAn7VR+1Wcl1Zpxbzg/qdzsYVwsg9qbYMiuCiU8b8uKCTsdCwk3ZMCjqCQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://avatars.githubusercontent.com/u/12284966?v=4",
                            SecurityStamp = "2492560",
                            TwoFactorEnabled = false,
                            UserName = "Gallo@Email.com"
                        },
                        new
                        {
                            Id = "5c14cfbf-9769-4669-b1af-219b0df33acb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a8f335f-8c42-48d7-b7c7-11dff116e1e0",
                            Email = "Kai@Email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Kaique",
                            NormalizedEmail = "KAI@EMAIL.COM",
                            NormalizedUserName = "KAI@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI5yLRPy67V+5S24EBcqGvJ3P3W+Jsu4M3UaSUws61VWc+jUIXA/er9m3An0W6Ehmg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://avatars.githubusercontent.com/u/99449012?v=4",
                            SecurityStamp = "2492560",
                            TwoFactorEnabled = false,
                            UserName = "Kai@Email.com"
                        },
                        new
                        {
                            Id = "90d1106d-f7f9-4eb4-8e79-d17931d80fb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "584a776d-9439-4973-a445-354a795bcee6",
                            Email = "Leo@Email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leonardo",
                            NormalizedEmail = "LEO@EMAIL.COM",
                            NormalizedUserName = "LEO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFa+Ue0Io8ehIlo+HaVaZ6LzTzygjQf6UikvF9wqQYPO3u2i0iZtDHd9S78lTOCLCg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://avatars.githubusercontent.com/u/99449193?v=4",
                            SecurityStamp = "2492560",
                            TwoFactorEnabled = false,
                            UserName = "Leo@Email.com"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.Category", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Img")
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            Img = "https://cdn-icons-png.flaticon.com/512/1756/1756784.png",
                            Name = "Feiras e exposições de Arte"
                        },
                        new
                        {
                            Id = (ushort)2,
                            Img = "https://cdn-icons-png.flaticon.com/512/3399/3399161.png",
                            Name = "Leilões"
                        },
                        new
                        {
                            Id = (ushort)3,
                            Img = "https://cdn-icons-png.flaticon.com/512/33/33736.png",
                            Name = "Esporte"
                        },
                        new
                        {
                            Id = (ushort)4,
                            Img = "https://i.pinimg.com/originals/ca/16/fd/ca16fd3428cd473af9301ff50894f456.png",
                            Name = "Música"
                        },
                        new
                        {
                            Id = (ushort)5,
                            Img = "https://cdn-icons-png.flaticon.com/512/1101/1101820.png",
                            Name = "Games"
                        },
                        new
                        {
                            Id = (ushort)6,
                            Img = "https://cdn2.iconfinder.com/data/icons/theater-stage-performers/287/artist-show-performance-006-512.png",
                            Name = "Entretenimento"
                        },
                        new
                        {
                            Id = (ushort)7,
                            Img = "https://static.thenounproject.com/png/34322-200.png",
                            Name = "Anime"
                        },
                        new
                        {
                            Id = (ushort)8,
                            Img = "https://cdn-icons-png.flaticon.com/512/42/42972.png",
                            Name = "Formatura"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Barra Bonita",
                            StateId = 25
                        });
                });

            modelBuilder.Entity("TickeTac.Models.Event", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("CategoryId")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EventDateBegin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventDateEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PublicSpace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<ushort>("StatusEventId")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("StatusEventId");

                    b.HasIndex("UserId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            CategoryId = (ushort)4,
                            Cep = "1234567891234",
                            CityId = 1,
                            ContactEmail = "gallo@email.com",
                            ContactPhone = "14991115478",
                            Description = "Evento de rock que será realizado em Barra Bonita, com grandes artistas musicais como Gallo e Edriano",
                            District = "Nova Barra",
                            EventDateBegin = new DateTime(2023, 12, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDateEnd = new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://conteudo.solutudo.com.br/wp-content/uploads/2019/10/rock-nacional.jpg",
                            MoreInfo = "",
                            Name = "Show de Rock do Gallo",
                            Price = 150.99m,
                            PublicSpace = "Nem lembro o que é",
                            StateId = 25,
                            StatusEventId = (ushort)2,
                            UserId = "0aff4b3f-6c07-4325-adf8-5846e4fa4256"
                        },
                        new
                        {
                            Id = (ushort)2,
                            CategoryId = (ushort)6,
                            Cep = "1234567891234",
                            CityId = 1,
                            ContactEmail = "Kai@email.com",
                            ContactPhone = "14991144192",
                            Description = "Competição de tapa na cara! O vencedor ganha um prêmio especial.",
                            District = "Nova Barra",
                            EventDateBegin = new DateTime(2023, 2, 23, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDateEnd = new DateTime(2024, 3, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://video-images.vice.com/articles/5c939d5d2709700007238d39/lede/1553178006531-54222299_2219532254976982_7557531415907139584_o.jpeg",
                            MoreInfo = "",
                            Name = "Competição de tapa na cara",
                            Price = 50.00m,
                            PublicSpace = "Nem lembro o que é",
                            StateId = 25,
                            StatusEventId = (ushort)2,
                            UserId = "5c14cfbf-9769-4669-b1af-219b0df33acb"
                        },
                        new
                        {
                            Id = (ushort)3,
                            CategoryId = (ushort)3,
                            Cep = "1234567891234",
                            CityId = 1,
                            ContactEmail = "Leo@email.com",
                            ContactPhone = "14991548292",
                            Description = "Campeonato mundial de basquete! Seirin vs Touou.",
                            District = "Nova Barra",
                            EventDateBegin = new DateTime(2023, 1, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDateEnd = new DateTime(2023, 1, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://www.montealtoagora.com.br/upload/not-20220427185909basquete-22.jpg",
                            MoreInfo = "",
                            Name = "Campeonato de Basquete",
                            Price = 50.00m,
                            PublicSpace = "Nem lembro o que é",
                            StateId = 25,
                            StatusEventId = (ushort)3,
                            UserId = "90d1106d-f7f9-4eb4-8e79-d17931d80fb7"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.EventReview", b =>
                {
                    b.Property<ushort>("EventId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventReviews");
                });

            modelBuilder.Entity("TickeTac.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AL"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AM"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BA"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "DF"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ES"
                        },
                        new
                        {
                            Id = 9,
                            Name = "GO"
                        },
                        new
                        {
                            Id = 10,
                            Name = "MA"
                        },
                        new
                        {
                            Id = 11,
                            Name = "MT"
                        },
                        new
                        {
                            Id = 12,
                            Name = "MS"
                        },
                        new
                        {
                            Id = 13,
                            Name = "MG"
                        },
                        new
                        {
                            Id = 14,
                            Name = "PA"
                        },
                        new
                        {
                            Id = 15,
                            Name = "PB"
                        },
                        new
                        {
                            Id = 16,
                            Name = "PR"
                        },
                        new
                        {
                            Id = 17,
                            Name = "PE"
                        },
                        new
                        {
                            Id = 18,
                            Name = "PI"
                        },
                        new
                        {
                            Id = 19,
                            Name = "RJ"
                        },
                        new
                        {
                            Id = 20,
                            Name = "RN"
                        },
                        new
                        {
                            Id = 21,
                            Name = "RS"
                        },
                        new
                        {
                            Id = 22,
                            Name = "RO"
                        },
                        new
                        {
                            Id = 23,
                            Name = "RR"
                        },
                        new
                        {
                            Id = 24,
                            Name = "SC"
                        },
                        new
                        {
                            Id = 25,
                            Name = "SP"
                        },
                        new
                        {
                            Id = 26,
                            Name = "SE"
                        },
                        new
                        {
                            Id = 27,
                            Name = "TO"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.StatusEvent", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("StatusEvent");

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            Name = "Concluido"
                        },
                        new
                        {
                            Id = (ushort)2,
                            Name = "Em andamento"
                        },
                        new
                        {
                            Id = (ushort)3,
                            Name = "Confirmado"
                        },
                        new
                        {
                            Id = (ushort)4,
                            Name = "Cancelado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TickeTac.Models.City", b =>
                {
                    b.HasOne("TickeTac.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("TickeTac.Models.Event", b =>
                {
                    b.HasOne("TickeTac.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.StatusEvent", "StatusEvent")
                        .WithMany()
                        .HasForeignKey("StatusEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("State");

                    b.Navigation("StatusEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TickeTac.Models.EventReview", b =>
                {
                    b.HasOne("TickeTac.Models.Event", "Event")
                        .WithMany("ReviewReceived")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.AppUser", "User")
                        .WithMany("UserMadeReview")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TickeTac.Models.AppUser", b =>
                {
                    b.Navigation("UserMadeReview");
                });

            modelBuilder.Entity("TickeTac.Models.Event", b =>
                {
                    b.Navigation("ReviewReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
