// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TickeTac.Data;

#nullable disable

namespace TickeTac.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d3f9cf85-b0a6-4419-81ed-4610d0f4c467",
                            ConcurrencyStamp = "ac63bb3e-7a23-443c-ab8d-098105f1f935",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "9b00989c-a770-4ef9-b5df-ef90adf697f0",
                            ConcurrencyStamp = "d4a98cef-2688-4231-a80a-d004076b866c",
                            Name = "Usuario",
                            NormalizedName = "USUÁRIO"
                        },
                        new
                        {
                            Id = "268d6d40-e06f-4cfc-9641-d24fe1e3cae4",
                            ConcurrencyStamp = "ef93eb6d-6e77-4a98-a7ea-4c99342b3360",
                            Name = "Organizador",
                            NormalizedName = "ORGANIZADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "988d4894-1723-42bb-8a50-90b11b814b88",
                            RoleId = "d3f9cf85-b0a6-4419-81ed-4610d0f4c467"
                        },
                        new
                        {
                            UserId = "30cf60da-c234-48c7-8269-37cc4a08ad52",
                            RoleId = "9b00989c-a770-4ef9-b5df-ef90adf697f0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TickeTac.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "988d4894-1723-42bb-8a50-90b11b814b88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46b4c75a-6921-495c-a1ec-14c4ce1f3cd3",
                            Email = "Admin@TickeTac.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leonardo",
                            NormalizedEmail = "ADMIN@TICKETAC.COM",
                            NormalizedUserName = "ADMIN@TICKETAC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC2mO9DzCWYv6C9y1MQx1/XK4tS2pD36KZ2j5QnXpFwSBWWzCk0FgV3yzX0gtUTYpA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            SecurityStamp = "54232412",
                            TwoFactorEnabled = false,
                            UserName = "Admin@TickeTac.com"
                        },
                        new
                        {
                            Id = "30cf60da-c234-48c7-8269-37cc4a08ad52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "247ad17c-020e-46bd-a2f2-697a6943887b",
                            Email = "Kaique@TickeTac.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Kaique",
                            NormalizedEmail = "KAIQUE@TICKETAC.COM",
                            NormalizedUserName = "KAKA@TICKETAC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEP5JMXQVw4e6zSgl2umkq/PPMn01P0YlvCLEZeWYbZJAFCXBay0bvJzVMLcRIkQJA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            SecurityStamp = "54232412",
                            TwoFactorEnabled = false,
                            UserName = "Kaka@TickeTac.com"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.Category", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Img")
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            Img = "https://cdn-icons-png.flaticon.com/512/1756/1756784.png",
                            Name = "Feiras e exposições Arte"
                        },
                        new
                        {
                            Id = (ushort)2,
                            Img = "https://cdn-icons-png.flaticon.com/512/3399/3399161.png",
                            Name = "Leilões "
                        },
                        new
                        {
                            Id = (ushort)3,
                            Img = "https://cdn-icons-png.flaticon.com/512/33/33736.png",
                            Name = "Esporte"
                        },
                        new
                        {
                            Id = (ushort)4,
                            Img = "https://i.pinimg.com/originals/ca/16/fd/ca16fd3428cd473af9301ff50894f456.png",
                            Name = "Musica"
                        },
                        new
                        {
                            Id = (ushort)5,
                            Img = "https://cdn-icons-png.flaticon.com/512/1101/1101820.png",
                            Name = "Games"
                        },
                        new
                        {
                            Id = (ushort)6,
                            Img = "https://cdn2.iconfinder.com/data/icons/theater-stage-performers/287/artist-show-performance-006-512.png",
                            Name = "Stand 'Up"
                        },
                        new
                        {
                            Id = (ushort)7,
                            Img = "https://static.thenounproject.com/png/34322-200.png",
                            Name = "Anime"
                        },
                        new
                        {
                            Id = (ushort)8,
                            Img = "https://cdn-icons-png.flaticon.com/512/42/42972.png",
                            Name = "Formatura"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Barra Bonita",
                            StateId = 25
                        });
                });

            modelBuilder.Entity("TickeTac.Models.Event", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("CategoryId")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("CityId")
                        .HasMaxLength(70)
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EventDateBegin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventDateEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<ushort>("EventOwnerId")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PublicSpace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<ushort>("StatusEventId")
                        .HasColumnType("smallint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("EventOwnerId");

                    b.HasIndex("StatusEventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            CategoryId = (ushort)4,
                            Cep = "1234567891234",
                            CityId = 1,
                            ContactEmail = "gallo@email.com",
                            ContactPhone = "14991115478",
                            Description = "Evento de rock que será realizado em Barra Bonita, com grandes artistas musicais como Gallo e Edriano",
                            District = "Nova Barra",
                            EventDateBegin = new DateTime(2023, 12, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDateEnd = new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EventOwnerId = (ushort)1,
                            Image = "https://conteudo.solutudo.com.br/wp-content/uploads/2019/10/rock-nacional.jpg",
                            MoreInfo = "",
                            Name = "Show de Rock do Gallo",
                            Price = 150.99m,
                            PublicSpace = "Nem lembro o que é",
                            StatusEventId = (ushort)2
                        });
                });

            modelBuilder.Entity("TickeTac.Models.EventOwner", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EventOwner");

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            CpfCnpj = "00100200304",
                            Name = "José Gallo",
                            UserId = "30cf60da-c234-48c7-8269-37cc4a08ad52"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.EventReview", b =>
                {
                    b.Property<ushort>("EventId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventReviews");
                });

            modelBuilder.Entity("TickeTac.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AL"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AM"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BA"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "DF"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ES"
                        },
                        new
                        {
                            Id = 9,
                            Name = "GO"
                        },
                        new
                        {
                            Id = 10,
                            Name = "MA"
                        },
                        new
                        {
                            Id = 11,
                            Name = "MT"
                        },
                        new
                        {
                            Id = 12,
                            Name = "MS"
                        },
                        new
                        {
                            Id = 13,
                            Name = "MG"
                        },
                        new
                        {
                            Id = 14,
                            Name = "PA"
                        },
                        new
                        {
                            Id = 15,
                            Name = "PB"
                        },
                        new
                        {
                            Id = 16,
                            Name = "PR"
                        },
                        new
                        {
                            Id = 17,
                            Name = "PE"
                        },
                        new
                        {
                            Id = 18,
                            Name = "PI"
                        },
                        new
                        {
                            Id = 19,
                            Name = "RJ"
                        },
                        new
                        {
                            Id = 20,
                            Name = "RN"
                        },
                        new
                        {
                            Id = 21,
                            Name = "RS"
                        },
                        new
                        {
                            Id = 22,
                            Name = "RO"
                        },
                        new
                        {
                            Id = 23,
                            Name = "RR"
                        },
                        new
                        {
                            Id = 24,
                            Name = "SC"
                        },
                        new
                        {
                            Id = 25,
                            Name = "SP"
                        },
                        new
                        {
                            Id = 26,
                            Name = "SE"
                        },
                        new
                        {
                            Id = 27,
                            Name = "TO"
                        });
                });

            modelBuilder.Entity("TickeTac.Models.StatusEvent", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("StatusEvent");

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            Name = "Concluido"
                        },
                        new
                        {
                            Id = (ushort)2,
                            Name = "Em andamento"
                        },
                        new
                        {
                            Id = (ushort)3,
                            Name = "Confirmado"
                        },
                        new
                        {
                            Id = (ushort)4,
                            Name = "Cancelado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TickeTac.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TickeTac.Models.City", b =>
                {
                    b.HasOne("TickeTac.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("TickeTac.Models.Event", b =>
                {
                    b.HasOne("TickeTac.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.EventOwner", "EventOwner")
                        .WithMany()
                        .HasForeignKey("EventOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.StatusEvent", "StatusEvent")
                        .WithMany()
                        .HasForeignKey("StatusEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("EventOwner");

                    b.Navigation("StatusEvent");
                });

            modelBuilder.Entity("TickeTac.Models.EventOwner", b =>
                {
                    b.HasOne("TickeTac.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TickeTac.Models.EventReview", b =>
                {
                    b.HasOne("TickeTac.Models.Event", "Event")
                        .WithMany("ReviewReceived")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TickeTac.Models.AppUser", "User")
                        .WithMany("UserMadeReview")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TickeTac.Models.AppUser", b =>
                {
                    b.Navigation("UserMadeReview");
                });

            modelBuilder.Entity("TickeTac.Models.Event", b =>
                {
                    b.Navigation("ReviewReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
